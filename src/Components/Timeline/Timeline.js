import React, { Component } from 'react';

import { timelineStore, TODAY_MARKER_REFERENCE } from '../../Store';

import WeekComp from '../WeekComp/WeekComp';
import ClassBarRowComp from '../ClassBarRowComp/ClassBarRowComp';
import ClassTaskRowComp from '../ClassTaskRowComp/ClassTaskRowComp';
import Buttons from '../Buttons/Buttons';
import classes from './timeline.css';

export default class Timeline extends Component {
  state = {
    groupsColumnRef: null,
    todayMarkerRef: null
  };

  // passed down method for setting the groupsColumn ref
  setGroupColumnsRef = ref => {
    this.setState({ groupsColumnRef: ref });
  };

  // passed down method for setting the todayMarker ref
  setTodayMarkerRef = ref => {
    this.setState({ todayMarkerRef: ref });
  };

  renderWeekComp = () => {
    if (!this.props.allWeeks) return null;
    const { rowHeight, itemWidth } = this.props;
    return (
      <div className={classes.rowContainer}>
        {this.props.allWeeks.map(week => (
          <WeekComp
            setTodayMarkerRef={this.setTodayMarkerRef}
            key={week}
            week={week}
            rowHeight={rowHeight}
            itemWidth={itemWidth}
          />
        ))}
      </div>
    );
  };

  renderTaskRowComp = () => {
    if (
      !this.props.groups ||
      !this.props.timelineItems ||
      !this.props.allWeeks
    ) {
      return null;
    }
    return this.props.groups.map(group => {
      const items = this.props.timelineItems[group];
      const { itemWidth, rowHeight } = this.props;
      return (
        <div key={items[0].group_name} className={classes.rowContainer}>
          <ClassTaskRowComp
            selectedModule={this.props.selectedModule}
            items={items}
            width={itemWidth}
            height={rowHeight}
            allWeeks={this.props.allWeeks}
            clickHandler={this.props.itemClickHandler}
          />
        </div>
      );
    });
  };

  observer = mergedData => {
    switch (mergedData.type) {
      case TODAY_MARKER_REFERENCE:
        this.setState({ todayMarkerRef: mergedData.payload.todayMarkerRef });
        break;
      default:
        break;
    }
  };

  handleScroll = e => {
    const { groupsColumnRef } = this.state;
    const { scrollLeft, clientWidth } = e.target;
    // I am setting this.state.... = but this is just a reference to an element
    // scroll the groups row along
    groupsColumnRef.style.left = scrollLeft + 'px';

    //scroll the buttons along
    this.refs.buttonsContainer.style.left =
      scrollLeft + clientWidth - 70 + 'px';
  };

  handleClickTodayMarker = e => {
    this.state.todayMarkerRef.scrollIntoView({ behavior: 'smooth' });
  };

  componentWillMount = () => {
    // so that it gets all setState notification from generated by componentDidMount of children elements
    timelineStore.subscribe(this.observer);
  };

  componentDidMount = () => {
    // kick in the process by getting the items and changing the state properties
    // in didMount cause it causes side-effects
    timelineStore.fetchItems();
  };

  componentWillUnmount = () => {
    timelineStore.unsubscribe(this.observer);
  };

  render() {
    const { itemWidth, rowHeight, allWeeks } = this.props;
    // if there items are fetched  width is the 200 times total weeks otherwise it's 100vh
    // FIXME: no idea why this is not working with just 16 instead of 21
    const width = allWeeks
      ? itemWidth * allWeeks.length + 21 * allWeeks.length + 'px'
      : '100vw';
    return (
      <div className={classes.root} onScroll={this.handleScroll}>
        <div className={classes.timelineContainer} style={{ width: width }}>
          <div ref="buttonsContainer" className={classes.buttonsContainer}>
            <Buttons
              originalData={this.props.originalData}
              clickHandler={this.handleClickTodayMarker}
              isTeacher={true}
              selectedModule={this.props.selectedModule}
            />
          </div>
          <ClassBarRowComp
            setGroupColumnsRef={this.setGroupColumnsRef}
            groups={this.props.groups}
            rowHeight={rowHeight}
          />
          <div className={classes.rowsContainer}>
            {this.renderWeekComp()}
            {this.renderTaskRowComp()}
          </div>
        </div>
      </div>
    );
  }
}
